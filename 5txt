import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score


df=pd.read_excel("random forest.xlsx")
df.isnull().sum()

x=df.drop(["Sl No","USN","Name","Title","Grade"],axis=1)
y=df["Grade"]
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=42)

rf = RandomForestClassifier(random_state=42)
rf.fit(x_train, y_train)
feature_importances = pd.Series(rf.feature_importances_, index=x.columns)
sorted_features = feature_importances.sort_values(ascending=False)
plt.figure(figsize=(10, 6))
sns.barplot(x=sorted_features, hue=sorted_features.index, palette="viridis")
plt.xlabel('Feature Importance')
plt.ylabel('Features')
plt.title('Random Forest - Feature Importance')
plt.show()


# Tuning the Random Forest using GridSearchCV (example parameters, you can modify them)
from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, 
                           cv=3, n_jobs=-1, verbose=2)

grid_search.fit(x_train, y_train)
# print(grid_search)
# Get the best parameters after tuning
best_params = grid_search.best_params_
print(best_params)
# Implementing the best Random Forest model
best_rf = RandomForestClassifier(random_state=42, **best_params)
best_rf.fit(x_train, y_train)

# Predictions
y_pred = best_rf.predict(x_test)


# Analyze the model performance
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Display the output
print("Best Parameters after Tuning: ", best_params)
print("Accuracy: {:.2f}%".format(accuracy * 100))
print("Classification Report:")
print(report)

param_grid={'n_estimators':[100,200,300],'max_depth':[None,10,20],'min_samples_split':[2,5,10],'min_samples_leaf':[1,2,4]}

grid_search=GridSearchCV(RandomForestClassifier(random_state=42),param_grid,cv=5)

grid_search.fit(x_train,y_train)
