import numpy as np
import keras
from keras.datasets import mnist
from keras import models
from keras.layers import Dense, Input
from keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten
from keras import backend as k


(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
train_images = train_images.reshape((60000, 28, 28, 1))
test_images = test_images.reshape((10000, 28, 28, 1))

train_images = train_images.astype('float32') / 255
test_images = test_images.astype('float32') / 255


train_labels = keras.utils.to_categorical(train_labels)
test_labels = keras.utils.to_categorical(test_labels)


model = models.Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(48, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.5))
model.add(Flatten())
model.add(Dense(500, activation='relu'))
model.add(Dense(10, activation='softmax'))


model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
              
model.fit(train_images, train_labels, epochs=10, batch_size=128,verbose=2,validation_split=0.1)
              
test_loss, test_acc = model.evaluate(test_images, test_labels)
print('Test accuracy:', test_acc)



import numpy as np
image_index=21

image = np.reshape(test_images[image_index], (1, 28, 28, 1))

predictions = model.predict(image)
predicted_label = np.argmax(predictions)

actual_label = np.argmax(test_labels[image_index])

print(f"Predicted Label: {predicted_label}")
print(f"Actual Label: {actual_label}")

import matplotlib.pyplot as plt

plt.imshow(np.squeeze(test_images[image_index]), cmap='gray')
plt.show()


plt.imshow(np.squeeze(test_images[10]), cmap='gray')
