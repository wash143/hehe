import pandas as pd

data=pd.read_csv("iris.csv")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


data = data.drop('Id', axis=1)
X= data.drop('Species', axis=1)
y = data['Species']

le = LabelEncoder()
y = le.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


mlp_classifier = MLPClassifier(hidden_layer_sizes=(100, 50), activation='relu', max_iter=500, random_state=42)

mlp_classifier.fit(X_train, y_train)


train_predictions = mlp_classifier.predict(X_train)
train_accuracy = accuracy_score(y_train, train_predictions)
print("Training Accuracy: {:.2f}%".format(train_accuracy * 100))

test_predictions = mlp_classifier.predict(X_test)
test_accuracy = accuracy_score(y_test, test_predictions)
print("Test Accuracy: {:.2f}%".format(test_accuracy * 100))

manual_input = [[5.1, 3.5, 1.4, 0.2]] 
predicted_class = mlp_classifier.predict(manual_input)
predicted_class_label = le.inverse_transform(predicted_class)


class_report = classification_report(y_test, test_predictions, target_names=le.classes_)
print("Classification Report:\n", class_report)
conf_matrix = confusion_matrix(y_test, test_predictions)
print("Confusion Matrix:\n", conf_matrix)

print("Predicted Class for Manual Input:", predicted_class_label[0])
